import numpy as np
from matplotlib import pyplot as plt
from scipy.integrate import odeint
from scipy.spatial.distance import cosine
import pandas as pd
import networkx as nx


# Lorenz系统的定义
def lorenz_deriv(w, t, sigma=10.0, beta=8.0 / 3.0, rho=28.0):
    x, y, z = w
    return [sigma * (y - x), x * (rho - z) - y, x * y - beta * z]


# 初始条件和时间跨度
initial_state = [1.0, 1.0, 1.0]
t = np.arange(0, 10000, 1)  # 10000个时间点

# 模拟Lorenz系统
lorenz = odeint(lorenz_deriv, initial_state, t)

# 滑动窗口大小和子段数量
window_size = 100  # 每个子段包含100个时间点
num_segments = 100  # 总共100个子段
step_size = int(np.ceil(lorenz.shape[0] / num_segments))

# 存储相关性矩阵的列表
correlation_matrices = []

# 滑动窗口分析
for i in range(0, lorenz.shape[0] - window_size + 1, step_size):
    segment = lorenz[i:i + window_size, :]
    # 计算3x3的相关性矩阵
    correlation_matrix = np.corrcoef(segment, rowvar=False)
    correlation_matrices.append(correlation_matrix)

# 确保我们有100个矩阵
correlation_matrices = correlation_matrices[:100]

# 计算余弦距离矩阵
distance_matrix = np.zeros((len(correlation_matrices), len(correlation_matrices)))
for i in range(len(correlation_matrices)):
    for j in range(len(correlation_matrices)):
        # 使用向量化（flatten）后的矩阵计算余弦距离
        dist = cosine(correlation_matrices[i].flatten(), correlation_matrices[j].flatten())
        distance_matrix[i, j] = dist

    # 找到距离矩阵中的最大值
max_distance = distance_matrix.max()

# 将距离矩阵二值化
binary_matrix = (distance_matrix > 0.2 * max_distance).astype(int)

# 将二值化矩阵保存为CSV文件
pd.DataFrame(binary_matrix).to_csv('binary_cosine_distance_matrix.csv', index=False, header=False)

# 使用二值化矩阵构建复杂网络
G = nx.from_numpy_array(binary_matrix)

# 打印网络的基本信息
print("Number of nodes in the graph:", G.number_of_nodes())
print("Number of edges in the graph:", G.number_of_edges())


nx.draw(G, with_labels=True)
plt.show()  # 需要先导入matplotlib.pyplot as plt
